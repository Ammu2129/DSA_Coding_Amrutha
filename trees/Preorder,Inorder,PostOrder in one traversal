// TO CALCULATE INORDER ,PREORDER AND POSTORDER IN ONE TRAVERSAL.

#include <bits/stdc++.h>
using namespace std;
struct TreeNode{
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int data){
        val=data;
        left=NULL;
        right=NULL;
    }
};
vector<int> inorder;
vector<int> postorder;
vector<int> preorder;
void compute(stack<pair<TreeNode*,int>> st){
    while(!st.empty()){
        TreeNode* temp=st.top().first;
        int state=st.top().second;
        st.pop();
        if(state==1){
            //preOrder
            preorder.push_back(temp->val);
            st.push({temp,state+1});
            if(temp->left !=NULL) st.push({temp->left,1});
        }
        else if(state==2){
            //inOrder
            inorder.push_back(temp->val);
            st.push({temp,state+1});
            if(temp->right!=NULL) st.push({temp->right,1});
        }
        else{
            //postOrder
            postorder.push_back(temp->val);
        }
    }
}
int main() {
    TreeNode* root=new TreeNode(2);
    TreeNode* node1=new TreeNode(1);
    TreeNode* node2=new TreeNode(0);
    TreeNode* node3=new TreeNode(5);
    TreeNode* node4=new TreeNode(9);
    TreeNode* node5=new TreeNode(8);
    TreeNode* node6=new TreeNode(11);
    root->left=node1;
    root->right=node2;
    node1->left=node3;
    node1->right=node4;
    node4->left=node6;
    node2->right=node5;
    
    inorder={};
    postorder={};
    preorder={};
    
    stack<pair<TreeNode*,int>> st;
    st.push({root,1});
    compute(st);
    for(auto it: postorder){
        cout<<it<<" ";
    }
    return 0;
}
