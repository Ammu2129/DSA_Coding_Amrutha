//approach 1   O(n*N) complexity
int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        return 1 + max(maxDepth(root->left),maxDepth(root->right));
    }
bool isBalanced(TreeNode* root) {
        if(root==NULL) return true;
        if(abs(maxDepth(root->left)-maxDepth(root->right))>1) return false;
        return isBalanced(root->left) && isBalanced(root->right);
}


//approach 2 
//in this approach for each node if the sub trees are not balanced then we are stopping the iteration to get the depth 
//at the node itself and returning -1.
int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        int lh=maxDepth(root->left);
        if(lh==-1) return -1;
        int rh=maxDepth(root->right);
        if(rh==-1) return -1;
        if(abs(lh-rh)>1) return -1;
        return 1 + max(lh,rh);
}
bool isBalanced(TreeNode* root) {
        int res=maxDepth(root);
        if(res==-1) return false;
        return true;
}
