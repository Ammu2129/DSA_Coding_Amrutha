//approach 1 : recursive approach
 void postOrder(TreeNode* root,vector<int>& ans){
        if(root==NULL) return;
        postOrder(root->left,ans);
        postOrder(root->right,ans);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        postOrder(root,ans);
        return ans;
    }


//approach 2: iterative approach
vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if (root == NULL)
            return ans;
        stack<TreeNode*> st;
        st.push(root);
        while (!st.empty()) {
            TreeNode* node = st.top();
            ans.push_back(node->val);
            st.pop();
            if (node->left != NULL)
                st.push(node->left);
            if (node->right != NULL)
                st.push(node->right);
        }
        reverse(ans.begin(),ans.end());
        return ans;
  }
