problem link: https://www.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

//top down approach
class Solution{
public:
  int t[1001][1001]; //t[n][w];
  int solve(int W, int wt[], int val[], int n) 
  { 
       // Your code here
       if(n==0 || W==0) return 0;
       
       if(t[n][W]!=-1) return t[n][W];
       
       if(wt[n-1]<=W){
           t[n][W]=max(val[n-1]+solve(W-wt[n-1],wt,val,n-1), solve(W,wt,val,n-1));
           return t[n][W];
       }
       else{
           t[n][W]=solve(W,wt,val,n-1);
           return t[n][W];
       }
  }
  int knapSack(int W, int wt[], int val[], int n) 
  { 
       // Your code here
       memset(t,-1,sizeof(t));
       return solve(W,wt,val,n);
  }
};

// bottom up
int knapSack(int W, int wt[], int val[], int n) 
{ 
       // Your code here
       int t[n+1][W+1];
       
       for(int i=0;i<n+1;i++){
           t[i][0]=0;
       }
       for(int i=0;i<W+1;i++){
           t[0][i]=0;
       }
       
       for(int i=1;i<n+1;i++){
           for(int j=1;j<W+1;j++){
               if(wt[i-1]<=j){
                   t[i][j]=max(val[i-1]+t[i-1][j-wt[i-1]], t[i-1][j]);
               }
               else{
                   t[i][j]=t[i-1][j];
               }
           }
       }
       return t[n][W];
}
